//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/UserInputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UserInputActionAsset: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UserInputActionAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UserInputActionAsset"",
    ""maps"": [
        {
            ""name"": ""Ghost"",
            ""id"": ""17b253e8-d006-46eb-9112-24f43a1e2b73"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""26a22a94-5472-4910-b32b-f09cc8570d53"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""a518d036-2fd7-4e24-a2e1-268e1f5a50c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Spawn"",
                    ""type"": ""Button"",
                    ""id"": ""59ebe59a-7a84-4826-bfc2-b1d06b66743b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Despawn"",
                    ""type"": ""Button"",
                    ""id"": ""96c65084-c109-4576-b4a8-2d9839c71a32"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3df4ef63-6fd3-4041-a47e-df55baa887c0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c6e7d006-17e2-4e1b-88b7-dac12acce441"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7e1852a2-f19e-4a1a-a414-83d93baf7ad4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f25acf54-6704-4628-ad87-032bcbac472b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d4f8607f-ab96-462c-b47e-1c56084694b1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9a0ad79f-54cf-4a2b-a4d1-2bbf5cef7baa"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8652fd1c-caac-42df-bed3-f5dd44648fa9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Spawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c1bd7ed7-450c-494d-a5cb-4f346fc1919c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Despawn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""716abc31-1d4b-4fbc-b777-cfae7c7d89f4"",
            ""actions"": [
                {
                    ""name"": ""EnableDisable"",
                    ""type"": ""Button"",
                    ""id"": ""0b09336e-c11c-4281-b8ad-1bd57ffa0153"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7597b5ca-794e-4c66-a409-b60081b5f71e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableDisable"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Ghost
        m_Ghost = asset.FindActionMap("Ghost", throwIfNotFound: true);
        m_Ghost_Move = m_Ghost.FindAction("Move", throwIfNotFound: true);
        m_Ghost_Look = m_Ghost.FindAction("Look", throwIfNotFound: true);
        m_Ghost_Spawn = m_Ghost.FindAction("Spawn", throwIfNotFound: true);
        m_Ghost_Despawn = m_Ghost.FindAction("Despawn", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_EnableDisable = m_UI.FindAction("EnableDisable", throwIfNotFound: true);
    }

    ~@UserInputActionAsset()
    {
        UnityEngine.Debug.Assert(!m_Ghost.enabled, "This will cause a leak and performance issues, UserInputActionAsset.Ghost.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, UserInputActionAsset.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Ghost
    private readonly InputActionMap m_Ghost;
    private List<IGhostActions> m_GhostActionsCallbackInterfaces = new List<IGhostActions>();
    private readonly InputAction m_Ghost_Move;
    private readonly InputAction m_Ghost_Look;
    private readonly InputAction m_Ghost_Spawn;
    private readonly InputAction m_Ghost_Despawn;
    public struct GhostActions
    {
        private @UserInputActionAsset m_Wrapper;
        public GhostActions(@UserInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Ghost_Move;
        public InputAction @Look => m_Wrapper.m_Ghost_Look;
        public InputAction @Spawn => m_Wrapper.m_Ghost_Spawn;
        public InputAction @Despawn => m_Wrapper.m_Ghost_Despawn;
        public InputActionMap Get() { return m_Wrapper.m_Ghost; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GhostActions set) { return set.Get(); }
        public void AddCallbacks(IGhostActions instance)
        {
            if (instance == null || m_Wrapper.m_GhostActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GhostActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Spawn.started += instance.OnSpawn;
            @Spawn.performed += instance.OnSpawn;
            @Spawn.canceled += instance.OnSpawn;
            @Despawn.started += instance.OnDespawn;
            @Despawn.performed += instance.OnDespawn;
            @Despawn.canceled += instance.OnDespawn;
        }

        private void UnregisterCallbacks(IGhostActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Spawn.started -= instance.OnSpawn;
            @Spawn.performed -= instance.OnSpawn;
            @Spawn.canceled -= instance.OnSpawn;
            @Despawn.started -= instance.OnDespawn;
            @Despawn.performed -= instance.OnDespawn;
            @Despawn.canceled -= instance.OnDespawn;
        }

        public void RemoveCallbacks(IGhostActions instance)
        {
            if (m_Wrapper.m_GhostActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGhostActions instance)
        {
            foreach (var item in m_Wrapper.m_GhostActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GhostActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GhostActions @Ghost => new GhostActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_EnableDisable;
    public struct UIActions
    {
        private @UserInputActionAsset m_Wrapper;
        public UIActions(@UserInputActionAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @EnableDisable => m_Wrapper.m_UI_EnableDisable;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @EnableDisable.started += instance.OnEnableDisable;
            @EnableDisable.performed += instance.OnEnableDisable;
            @EnableDisable.canceled += instance.OnEnableDisable;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @EnableDisable.started -= instance.OnEnableDisable;
            @EnableDisable.performed -= instance.OnEnableDisable;
            @EnableDisable.canceled -= instance.OnEnableDisable;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    public interface IGhostActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSpawn(InputAction.CallbackContext context);
        void OnDespawn(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnEnableDisable(InputAction.CallbackContext context);
    }
}
